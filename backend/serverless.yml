useDotenv: true
service: btcfix-be
configValidationMode: error

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs18.x
  httpApi:
    cors: true
  deploymentMethod: direct
  region: ${env:AWS_REGION}
  iam:
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/AWSLambdaService
  environment:
    STAGE: ${self:provider.stage}
    # Dynamo
    CONNECTIONS_TABLE: ${self:service}-${self:provider.stage}-connections
    STREAM_CONTENT_TABLE: ${self:service}-${self:provider.stage}-stream-content
    LANGUAGE_LOCKS_TABLE: ${self:service}-${self:provider.stage}-language-locks
    INVOICE_SUBSCRIPTION_TABLE: ${self:service}-${self:provider.stage}-invoice-subscription
    TITLE_TABLE: ${self:service}-${self:provider.stage}-title
    TOPIC_PREFIX_INVOICE: ${self:custom.topicPrefixInvoice}
    LANGUAGE_TABLE: ${self:service}-${self:provider.stage}-language
    # Lambda Invoke
    FIND_JOB_BY_ID_FUNCTION_NAME: ${self:service}-${self:provider.stage}-findJobById
    FIND_LANGUAGE_FUNCTION_NAME: ${self:service}-${self:provider.stage}-findLanguage
    CREATE_LANGUAGE_FUNCTION_NAME: ${self:service}-${self:provider.stage}-createLanguage
    CREATE_INVOICE_FUNCTION_NAME: ${self:service}-${self:provider.stage}-createInvoice
    FIND_INPUT_PAIR_FUNCTION_NAME: ${self:service}-${self:provider.stage}-findInputPair
    FIND_JOB_FUNCTION_NAME: ${self:service}-${self:provider.stage}-findJob
    CREATE_JOB_FUNCTION_NAME: ${self:service}-${self:provider.stage}-createJob
    FIND_ARGUMENT_FUNCTION_NAME: ${self:service}-${self:provider.stage}-findArgument
    LIKE_OR_DISLIKE: ${self:service}-${self:provider.stage}-likeOrDislike
    UPDATE_INPUT_PAIR_HIT_FUNCTION_NAME: ${self:service}-${self:provider.stage}-updateInputPairHit
    FIND_LATEST_ARGUMENT_PROMPT_FUNCTION_NAME: ${self:service}-${self:provider.stage}-findLatestArgumentPrompts
    FIND_BUDGET_FUNCTION_NAME: ${self:service}-${self:provider.stage}-findBudget
    CREATE_TITLE_FUNCTION_NAME: ${self:service}-${self:provider.stage}-createTitle
    UPDATE_JOB_FUNCTION_NAME: ${self:service}-${self:provider.stage}-updateJob
    UPDATE_INVOICE_FUNCTION_NAME: ${self:service}-${self:provider.stage}-updateInvoice
    STREAM_FUNCTION_NAME: ${self:service}-${self:provider.stage}-stream
    FINALIZE_JOB_FUNCTION_NAME: ${self:service}-${self:provider.stage}-finalizeJob
    SAVE_LANGUAGE_FUNCTION_NAME: ${self:service}-${self:provider.stage}-saveLanguage
    FIND_LANGUAGE_PROMPT_FUNCTION_NAME: ${self:service}-${self:provider.stage}-findLanguagePrompt
    UPDATE_ARGUMENT_FUNCTION_NAME: ${self:service}-${self:provider.stage}-updateArgument
    CREATE_COMPLETION_FUNCTION_NAME: ${self:service}-${self:provider.stage}-createCompletion
    FIND_TITLE_PROMPT_FUNCTION_NAME: ${self:service}-${self:provider.stage}-findTitlePrompt
    # API Gateway
    PUBLISH_ENDPOINT: !Sub "wss://${WebsocketsApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/"
    # IOT
    AWS_DEVICE_PRIVATE_KEY: ${ssm:DEVICE_PRIVATE_KEY, env:AWS_DEVICE_PRIVATE_KEY}
    AWS_IOT_HOST: ${env:AWS_IOT_HOST}
    AWS_IOT_CLIENT_ID: ${env:AWS_IOT_CLIENT_ID}
    TOPIC_PREFIX: ${self:custom.topicPrefix}
    # Alby
    SPEEDUP_AMOUNT_SATS: ${env:SPEEDUP_AMOUNT_SATS_${self:provider.stage}}
    WH_SECRET: ${env:WH_SECRET}
    ALBY_ACCOUNT_NAME: ${env:ALBY_ACCOUNT_NAME}
    #Open AI
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    GPT_VERSION: ${env:GPT_VERSION_${self:provider.stage}}

plugins:
  - serverless-esbuild
  - serverless-esbuild-layers
  - serverless-plugin-common-excludes
  - serverless-prune-plugin
  - serverless-scriptable-plugin
  - serverless-plugin-log-retention
  - serverless-plugin-layer-manager

package:
  individually: true
  patterns:
    - src/public-certs/**
    - src/graphql/schema.graphql

custom:
  layerConfig:
    installLayers: false
    exportPrefix: ${self:provider.stage}-
  esbuild:
    target: node18
    plugins: esbuild-plugins.cjs
    exclude:
      - "*"
  logRetentionInDays: 1
  scriptable:
    hooks:
      before:package:initialize: "STAGE=${self:provider.stage} sh ./ci/pre-install.sh"
      package:initialize: "STAGE=${self:provider.stage} sh ./ci/post-install.sh"
  prune:
    automatic: true
    number: 3
    includeLayers: true
  topicPrefix: topic/${self:service}-${self:provider.stage}/job-id
  topicPrefixInvoice: topic/${self:service}-${self:provider.stage}/invoice-job-id
  # Anchors
  prismaDefaults: &prismaDefaults
    vpc:
      securityGroupIds:
        - ${env:AWS_VPC_SECURITY_GROUP}
      subnetIds:
        - ${env:AWS_VPC_SUBNET_1}
        - ${env:AWS_VPC_SUBNET_2}
        - ${env:AWS_VPC_SUBNET_3}
    environment:
      DATABASE_URL: ${env:DATABASE_URL_${self:provider.stage}}
    layers:
      - { Ref: PrismaLambdaLayer }
    memorySize: 512
  DynamoDBTableDefaults: &dynamoDbTableDefaults
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Delete
  CommonTableProperties: &commonTableProps
    BillingMode: PAY_PER_REQUEST
    TimeToLiveSpecification:
      AttributeName: "ttl"
      Enabled: true
  AssumeRolePolicyLambda: &assumeRolePolicyLambda
    Version: "2012-10-17"
    Statement:
      - Effect: "Allow"
        Principal:
          Service:
            - "lambda.amazonaws.com"
        Action: "sts:AssumeRole"
  LambdaLoggingPermissions: &lambdaLoggingPermissions
    Effect: "Allow"
    Action:
      - "logs:CreateLogGroup"
      - "logs:CreateLogStream"
      - "logs:PutLogEvents"
      - "logs:TagResource"
    Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*:*"

layers:
  prisma:
    path: "./src/layers/prisma"
    name: ${self:service}-${self:provider.stage}-layer-prisma
    description: node_modules for prisma
    compatibleRuntimes:
      - nodejs18.x
  endpoint:
    path: "./src/layers/endpoint"
    name: ${self:service}-${self:provider.stage}-layer-endpoint
    description: node_modules for endpoints
    compatibleRuntimes:
      - nodejs18.x

functions:
  graphql:
    handler: src/graphql/server.handler
    events:
      - httpApi:
          path: /
          method: POST
      - httpApi:
          path: /
          method: GET
    role: graphqlInvokeLanguageRole
    layers:
      - { Ref: EndpointLambdaLayer }
    memorySize: 256
    timeout: 80 # 80 seconds

  invoice:
    handler: src/alby/endpoint.handler
    role: albyInvoiceRole
    events:
      - httpApi:
          path: /invoice
          method: POST
    layers:
      - { Ref: EndpointLambdaLayer }
    memorySize: 256
    timeout: 20 # 20 seconds

  websocket:
    handler: src/graphql/websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
    role: graphqlInvokeSubscriptionRole
    layers:
      - { Ref: EndpointLambdaLayer }
    memorySize: 256

  stream:
    handler: src/graphql/resolvers/stream.handler
    timeout: 200 # 3:20 minutes
    role: streamRole
    layers:
      - { Ref: EndpointLambdaLayer }
    memorySize: 256

  createLanguage:
    handler: src/language/create-language.handler
    timeout: 899 # 15 minutes
    maximumRetryAttempts: 1
    role: lambdaLanguageRole
    layers:
      - { Ref: EndpointLambdaLayer }
    memorySize: 3008

  createTitle:
    handler: src/titles/create-title.handler
    maximumRetryAttempts: 1
    role: lambdaTitleRole
    layers:
      - { Ref: EndpointLambdaLayer }
    memorySize: 256
    timeout: 20 # 20 seconds

  findLanguage:
    handler: src/prisma/find-language.handler
    <<: *prismaDefaults

  saveLanguage:
    handler: src/prisma/save-language.handler
    <<: *prismaDefaults

  findInputPair:
    handler: src/prisma/find-input-pair.handler
    <<: *prismaDefaults

  findJob:
    handler: src/prisma/find-job.handler
    <<: *prismaDefaults

  createJob:
    handler: src/prisma/create-job.handler
    <<: *prismaDefaults

  findArgument:
    handler: src/prisma/find-argument.handler
    <<: *prismaDefaults

  likeOrDislike:
    handler: src/prisma/like-or-dislike.handler
    <<: *prismaDefaults

  updateInputPairHit:
    handler: src/prisma/update-input-pair-hit.handler
    <<: *prismaDefaults

  findJobById:
    handler: src/prisma/find-job-by-id.handler
    <<: *prismaDefaults

  updateJob:
    handler: src/prisma/update-job.handler
    <<: *prismaDefaults

  finalizeJob:
    handler: src/prisma/finalize-job.handler
    <<: *prismaDefaults

  findLanguagePrompt:
    handler: src/prisma/find-language-prompt.handler
    <<: *prismaDefaults

  findLatestArgumentPrompts:
    handler: src/prisma/find-latest-argument-prompts.handler
    <<: *prismaDefaults

  createCompletion:
    handler: src/prisma/create-completion.handler
    <<: *prismaDefaults

  createBudgets:
    handler: src/prisma/create-budget.handler
    events:
      - schedule:
          rate: cron(0 0 1 * ? *)
          enabled: true
    <<: *prismaDefaults

  findBudget:
    handler: src/prisma/find-budget.handler
    <<: *prismaDefaults

  createInvoice:
    handler: src/prisma/create-invoice.handler
    <<: *prismaDefaults

  updateInvoice:
    handler: src/prisma/update-invoice.handler
    <<: *prismaDefaults

  findTitlePrompt:
    handler: src/prisma/find-title-prompt.handler
    <<: *prismaDefaults

resources:
  Resources:
    ConnectionsTable:
      <<: *dynamoDbTableDefaults
      Properties:
        <<: *commonTableProps
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
    StreamContentTable:
      <<: *dynamoDbTableDefaults
      Properties:
        <<: *commonTableProps
        TableName: ${self:provider.environment.STREAM_CONTENT_TABLE}
        AttributeDefinitions:
          - AttributeName: streamId
            AttributeType: S
          - AttributeName: sequenceNumber
            AttributeType: N
        KeySchema:
          - AttributeName: streamId
            KeyType: HASH
          - AttributeName: sequenceNumber
            KeyType: RANGE
    LanguageLocksTable:
      <<: *dynamoDbTableDefaults
      Properties:
        <<: *commonTableProps
        TableName: ${self:provider.environment.LANGUAGE_LOCKS_TABLE}
        AttributeDefinitions:
          - AttributeName: language
            AttributeType: S
        KeySchema:
          - AttributeName: language
            KeyType: HASH
    InvoiceSubscriptionTable:
      <<: *dynamoDbTableDefaults
      Properties:
        <<: *commonTableProps
        TableName: ${self:provider.environment.INVOICE_SUBSCRIPTION_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: topic
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
          - AttributeName: topic
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: TopicIndex
            KeySchema:
              - AttributeName: topic
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ConnectionIdIndex
            KeySchema:
              - AttributeName: connectionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    TitleTable:
      <<: *dynamoDbTableDefaults
      Properties:
        <<: *commonTableProps
        TableName: ${self:provider.environment.TITLE_TABLE}
        AttributeDefinitions:
          - AttributeName: argumentId
            AttributeType: N
        KeySchema:
          - AttributeName: argumentId
            KeyType: HASH

    graphqlInvokeLanguageRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: graphql-invoke-language-role-${self:provider.stage}
        AssumeRolePolicyDocument: *assumeRolePolicyLambda
        Policies:
          - PolicyName: graphqlInvokeLanguagePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - *lambdaLoggingPermissions
                - Effect: "Allow"
                  Action: "lambda:InvokeFunction"
                  Resource:
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-createLanguage"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findLanguage"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findInputPair"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findJob"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-createJob"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findLatestArgumentPrompts"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findArgument"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-updateInputPairHit"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-likeOrDislike"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findBudget"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:PutItem"
                    - "dynamodb:DeleteItem"
                  Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.LANGUAGE_LOCKS_TABLE}"

    graphqlInvokeSubscriptionRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: graphql-invoke-subscription-role-${self:provider.stage}
        AssumeRolePolicyDocument: *assumeRolePolicyLambda
        Policies:
          - PolicyName: graphqlInvokeSubscriptionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - *lambdaLoggingPermissions
                - Effect: "Allow"
                  Action: "lambda:InvokeFunction"
                  Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-stream"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:PutItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:GetItem"
                  Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.CONNECTIONS_TABLE}"
                - Effect: Allow
                  Action:
                    - "execute-api:Invoke"
                    - "execute-api:ManageConnections"
                  Resource: !Sub "arn:aws:execute-api:${self:provider.region}:${AWS::AccountId}:${WebsocketsApi}/${self:provider.stage}/*"

    streamRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: stream-role-${self:provider.stage}
        AssumeRolePolicyDocument: *assumeRolePolicyLambda
        Policies:
          - PolicyName: streamRolePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - *lambdaLoggingPermissions
                - Effect: "Allow"
                  Action: "lambda:InvokeFunction"
                  Resource:
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findJobById"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-createCompletion"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-updateJob"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-finalizeJob"
                - Effect: "Allow"
                  Action:
                    - "iot:Publish"
                    - "iot:Subscribe"
                    - "iot:Receive"
                  Resource:
                    - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/${self:custom.topicPrefix}:*"
                    - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${self:custom.topicPrefix}:*"
                - Effect: "Allow"
                  Action: "iot:Connect"
                  Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${AWS::AccountId}"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:PutItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:Query"
                  Resource:
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.CONNECTIONS_TABLE}"
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.STREAM_CONTENT_TABLE}"
                - Effect: Allow
                  Action:
                    - "execute-api:Invoke"
                    - "execute-api:ManageConnections"
                  Resource: !Sub "arn:aws:execute-api:${self:provider.region}:${AWS::AccountId}:${WebsocketsApi}/${self:provider.stage}/*"

    lambdaLanguageRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: lambda-language-role-${self:provider.stage}
        AssumeRolePolicyDocument: *assumeRolePolicyLambda
        Policies:
          - PolicyName: lambdaLanguageRolePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - *lambdaLoggingPermissions
                - Effect: "Allow"
                  Action: "lambda:InvokeFunction"
                  Resource:
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-saveLanguage"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findLanguagePrompt"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-createCompletion"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:PutItem"
                    - "dynamodb:DeleteItem"
                  Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.LANGUAGE_LOCKS_TABLE}"

    albyInvoiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: alby-invoice-role-${self:provider.stage}
        AssumeRolePolicyDocument: *assumeRolePolicyLambda
        Policies:
          - PolicyName: albyInvoiceRolePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - *lambdaLoggingPermissions
                - Effect: "Allow"
                  Action: "lambda:InvokeFunction"
                  Resource:
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findJobById"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-updateJob"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-updateInvoice"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:GetItem"
                  Resource:
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.CONNECTIONS_TABLE}"
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.INVOICE_SUBSCRIPTION_TABLE}"
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.INVOICE_SUBSCRIPTION_TABLE}/index/*"
                - Effect: Allow
                  Action:
                    - "execute-api:Invoke"
                    - "execute-api:ManageConnections"
                  Resource: !Sub "arn:aws:execute-api:${self:provider.region}:${AWS::AccountId}:${WebsocketsApi}/${self:provider.stage}/*"

    lambdaTitleRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: lambda-title-role-${self:provider.stage}
        AssumeRolePolicyDocument: *assumeRolePolicyLambda
        Policies:
          - PolicyName: lambdaTitleRolePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - *lambdaLoggingPermissions
                - Effect: "Allow"
                  Action: "lambda:InvokeFunction"
                  Resource:
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findArgument"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-updateArgument"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-createCompletion"
                    - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-findTitlePrompt"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                  Resource:
                    - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.TITLE_TABLE}"
