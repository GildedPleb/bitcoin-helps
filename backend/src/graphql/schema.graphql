type Query {
  hello: String
  getAfffiliationsAndIssues(language: String!): LanguageSelectors
  getArgumentId(
    languageId: String
    issueId: String
    affiliationId: String
  ): ArgumentId
  getInputPairByArgumentId(id: Int!): InputPairOrJob
  getSpeedUpInvoice(jobId: String!): Invoice
  getArgumentRoute(id: Int!): ArugmentRoute
}

type Mutation {
  like(id: Int!): Int
  dislike(id: Int!): Int
}

type Subscription {
  subscribeToArgument(jobId: String!): Update
  subscribeToInvoice(jobId: String!): Paid
}

type Invoice {
  expiresAt: String!
  paymentRequest: String!
  settled: Boolean!
}

type Paid {
  type: String!
  message: String!
}

type Update {
  type: String!
  message: String!
  sequence: Int!
}

type Job {
  jobId: String!
  argumentId: Int!
  language: LanguageMinimal!
  scheduledFor: String!
}

type Argument {
  content: String!
}

type LanguageMinimal {
  name: String!
}

type InputPair {
  arguments: [Argument!]!
  language: LanguageMinimal!
}

union InputPairOrJob = Job | InputPair

type ArugmentRoute {
  title: String!
  subtitle: String!
  language: String!
  route: InputPairOrJob!
}

type ArgumentId {
  id: Int!
}

type OptionType {
  value: String!
  label: String!
}

type GroupType {
  label: String!
  options: [OptionType!]!
}

type TranslationTypeMapped {
  selectAffiliation: String!
  selectIssue: String!
  selectNoMatch: String!
  speak: String!
  iAmAffiliatedWith: String!
  andICareAbout: String!
  loading: String!
  whyCare: String!
  curatingContent: String!
  readNow: String!
  siteTitle: String!
  siteDescription: String!
}

type LanguageSelectors {
  id: String!
  translations: TranslationTypeMapped!
  issueCategories: [GroupType!]!
  affiliationTypes: [GroupType!]!
}
